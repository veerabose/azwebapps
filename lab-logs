[student@workstation ~]$ lab-configure

 . Enter the GitHub account name: veerabose
   Verifying GitHub account name: veerabose

 . Enter the Quay.io account name: veeraabose
   Verifying Quay.io account name: veeraabose

 . Configuring RHT_OCP4_GITHUB_USER variable: SUCCESS
 . Configuring RHT_OCP4_QUAY_USER variable:   SUCCESS

 . To reconfigure, run: lab-configure -d

 . Ensuring user 'developer' can log in to the OpenShift cluster.
Warning: Permanently added 'utility,172.25.250.253' (ECDSA) to the list of known hosts.
ERROR: Cannot currently log in as user kubeadmin.
[student@workstation ~]$ ^C
[student@workstation ~]$ ^C
[student@workstation ~]$ https://github.com/veerabose/DO180-apps.git
bash: https://github.com/veerabose/DO180-apps.git: No such file or directory
[student@workstation ~]$ git clone https://github.com/veerabose/DO180-apps.git
Cloning into 'DO180-apps'...
remote: Enumerating objects: 172, done.
remote: Total 172 (delta 0), reused 0 (delta 0), pack-reused 172
Receiving objects: 100% (172/172), 287.19 KiB | 480.00 KiB/s, done.
Resolving deltas: 100% (70/70), done.
[student@workstation ~]$ ls
Desktop  DO180-apps  Documents  Downloads  Music  Pictures  Public  Templates  Videos
[student@workstation ~]$ cd DO180-apps/
[student@workstation DO180-apps]$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
[student@workstation DO180-apps]$

[student@workstation DO180-apps]$ git checkout -b testbranch
Switched to a new branch testbranch

[student@workstation DO180-apps]$ git add .
[student@workstation DO180-apps]$ git commit -m "DO180"
[testbranch a2978b1] DO180
 1 file changed, 1 insertion(+)
 create mode 100644 TEST
[student@workstation DO180-apps]$ git push --set-upstream origin testbranch
Gtk-Message: 12:09:29.984: Failed to load module "canberra-gtk-module"
Gtk-Message: 12:09:42.026: Failed to load module "canberra-gtk-module"
remote: No anonymous write access.
fatal: Authentication failed for 'https://github.com/veerabose/DO180-apps.git/'
[student@workstation DO180-apps]$ git push --set-upstream origin testbranch
Gtk-Message: 12:10:00.358: Failed to load module "canberra-gtk-module"
Gtk-Message: 12:10:21.575: Failed to load module "canberra-gtk-module"
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 2 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 285 bytes | 285.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
remote: 
remote: Create a pull request for 'testbranch' on GitHub by visiting:
remote:      https://github.com/veerabose/DO180-apps/pull/new/testbranch
remote: 
To https://github.com/veerabose/DO180-apps.git
 * [new branch]      testbranch -> testbranch
Branch 'testbranch' set up to track remote branch 'testbranch' from 'origin'.
[student@workstation DO180-apps]$ echo "OCP4" > TEST
[student@workstation DO180-apps]$ git add .
[student@workstation DO180-apps]$ git commit -m "OCP4"
[testbranch 00edc58] OCP4
 1 file changed, 1 insertion(+), 1 deletion(-)
[student@workstation DO180-apps]$ git push
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 2 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 274 bytes | 274.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/veerabose/DO180-apps.git
   a2978b1..00edc58  testbranch -> testbranch
[student@workstation DO180-apps]$ 

----------------------
In this chapter, you learned:
• Containers are isolated application runtimes, created with very little overhead.
• A container image packages an application with all of its dependencies, making it easier to run
the application in different environments.
• Applications such as Podman create containers using features of the standard Linux kernel.
• Container image registries are the preferred mechanism for distributing container images to
multiple users and hosts.
• OpenShift orchestrates applications composed of multiple containers using Kubernetes.
• Kubernetes manages load balancing, high availability, and persistent storage for containerized
applications.
• OpenShift adds to Kubernetes multitenancy, security, ease of use, and continuous integration
and continuous development features.
• OpenShift routes enable external access to containerized applications in a manageable way.

---------------------------------------------

[student@workstation DO180-apps]$ lab container-create start

Setting up workstation for the Guided Exercise: Creating a MySQL database instance

 · Checking podman configuration...............................  SUCCESS
 · Creating create_table.txt file..............................  SUCCESS
[student@workstation DO180-apps]$ podman login registry.redhat.io
Username: veeraabose
Password: 
Login Succeeded!
[student@workstation DO180-apps]$

[student@workstation DO180-apps]$ podman run --name mysql-basic -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55 -d registry.redhat.io/rhel8/mysql-80:1
Trying to pull registry.redhat.io/rhel8/mysql-80:1...
Getting image source signatures
Checking if image destination supports signatures
Copying blob 36bead343ed7 done  
Copying blob e556e33d0b40 done  
Copying blob 1b3417e31a5e done  
Copying blob 809fe483e885 done  
Copying config 82eb01fb3a done  
Writing manifest to image destination
Storing signatures
770f4a2f7d0092db37f1ecbee7346ba52d13eb7ef9429259a2db7f5d83b01e24
[student@workstation DO180-apps]$ podman ps --format "{{.ID}} {{.Image}} {{.Names}}"
770f4a2f7d00 registry.redhat.io/rhel8/mysql-80:1 mysql-basic
[student@workstation DO180-apps]$ podman exec -it mysql-basic /bin/bash
bash-4.4$ mysql -uroot
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 8.0.26 Source distribution

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| items              |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)

mysql> USE items;
Database changed
mysql> 
mysql> CREATE TABLE Projects (id int NOT NULL,
    -> name varchar(255) DEFAULT NULL,
    -> code varchar(255) DEFAULT NULL,
    -> PRIMARY KEY (id));
Query OK, 0 rows affected (0.06 sec)

mysql> SHOW TABLES;
+-----------------+
| Tables_in_items |
+-----------------+
| Projects        |
+-----------------+
1 row in set (0.00 sec)

mysql> INSERT INTO Projects (id, name, code) VALUES (1,'DevOps','DO180');
Query OK, 1 row affected (0.02 sec)

mysql> SELECT * FROM Projects;
+----+--------+-------+
| id | name   | code  |
+----+--------+-------+
|  1 | DevOps | DO180 |
+----+--------+-------+
1 row in set (0.00 sec)

mysql>
mysql> exit
Bye
bash-4.4$ exit
exit
[student@workstation DO180-apps]$ 

[student@workstation DO180-apps]$ lab container-create finish

Completing the Guided Exercise: Creating a MySQL database instance

 · Removing "mysql-basic" container............................  SUCCESS
 · Removing "registry.redhat.io/rhel8/mysql-80:1" image........  SUCCESS
[student@workstation DO180-apps]$

Summary
-------------------------------------------
In this chapter, you learned:
• Podman allows users to search for and download images from local or remote registries.
• The podman run command creates and starts a container from a container image.
• Containers are executed in the background by using the -d flag, or interactively by using the -
it flag.
• Some container images require environment variables that are set using the -e option with the
podman run command.
• Red Hat Container Catalog assists in searching, exploring, and analyzing container images from
Red Hat's official container image repository.

----------------------------------------------06Oct2022--------------------------------------------

[student@workstation ~]$ lab manage-lifecycle start

Setting up workstation for the Guided Excercise: Managing a MySQL Container

 · Checking podman configuration...............................  SUCCESS
 · Setting up labs folder......................................  SUCCESS
 · Downloading starter project.................................  SUCCESS
 · Downloading solution project................................  SUCCESS

Setup successful. Please proceed with the exercise.

[student@workstation ~]$ podman login registry.redhat.io
Authenticating with existing credentials for registry.redhat.io
Existing credentials are valid. Already logged in to registry.redhat.io
[student@workstation ~]$ podman run --name mysql-db registry.redhat.io/rhel8/mysql-80:1
Trying to pull registry.redhat.io/rhel8/mysql-80:1...
Getting image source signatures
Checking if image destination supports signatures
Copying blob 36bead343ed7 done  
Copying blob 1b3417e31a5e done  
Copying blob 1770f4614fe5 done  
Copying blob 809fe483e885 done  
Copying config b5b0298033 done  
Writing manifest to image destination
Storing signatures
=> sourcing 20-validate-variables.sh ...
You must either specify the following environment variables:
  MYSQL_USER (regex: '^[a-zA-Z0-9_]+$')
  MYSQL_PASSWORD (regex: '^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$')
  MYSQL_DATABASE (regex: '^[a-zA-Z0-9_]+$')
Or the following environment variable:
  MYSQL_ROOT_PASSWORD (regex: '^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$')
Or both.
Optional Settings:
  MYSQL_LOWER_CASE_TABLE_NAMES (default: 0)
  MYSQL_LOG_QUERIES_ENABLED (default: 0)
  MYSQL_MAX_CONNECTIONS (default: 151)
  MYSQL_FT_MIN_WORD_LEN (default: 4)
  MYSQL_FT_MAX_WORD_LEN (default: 20)
  MYSQL_AIO (default: 1)
  MYSQL_KEY_BUFFER_SIZE (default: 32M or 10% of available memory)
  MYSQL_MAX_ALLOWED_PACKET (default: 200M)
  MYSQL_TABLE_OPEN_CACHE (default: 400)
  MYSQL_SORT_BUFFER_SIZE (default: 256K)
  MYSQL_READ_BUFFER_SIZE (default: 8M or 5% of available memory)
  MYSQL_INNODB_BUFFER_POOL_SIZE (default: 32M or 50% of available memory)
  MYSQL_INNODB_LOG_FILE_SIZE (default: 8M or 15% of available memory)
  MYSQL_INNODB_LOG_BUFFER_SIZE (default: 8M or 15% of available memory)

For more information, see https://github.com/sclorg/mysql-container
[student@workstation ~]$ podman ps 
CONTAINER ID  IMAGE       COMMAND     CREATED     STATUS      PORTS       NAMES
[student@workstation ~]$ podman ps -a
CONTAINER ID  IMAGE                                COMMAND     CREATED         STATUS                     PORTS       NAMES
1004d03199c9  registry.redhat.io/rhel8/mysql-80:1  run-mysqld  50 seconds ago  Exited (1) 51 seconds ago              mysql-db
[student@workstation ~]$ podman logs mysql-db
=> sourcing 20-validate-variables.sh ...
You must either specify the following environment variables:
  MYSQL_USER (regex: '^[a-zA-Z0-9_]+$')
  MYSQL_PASSWORD (regex: '^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$')
  MYSQL_DATABASE (regex: '^[a-zA-Z0-9_]+$')
Or the following environment variable:
  MYSQL_ROOT_PASSWORD (regex: '^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$')
Or both.
Optional Settings:
  MYSQL_LOWER_CASE_TABLE_NAMES (default: 0)
  MYSQL_LOG_QUERIES_ENABLED (default: 0)
  MYSQL_MAX_CONNECTIONS (default: 151)
  MYSQL_FT_MIN_WORD_LEN (default: 4)
  MYSQL_FT_MAX_WORD_LEN (default: 20)
  MYSQL_AIO (default: 1)
  MYSQL_KEY_BUFFER_SIZE (default: 32M or 10% of available memory)
  MYSQL_MAX_ALLOWED_PACKET (default: 200M)
  MYSQL_TABLE_OPEN_CACHE (default: 400)
  MYSQL_SORT_BUFFER_SIZE (default: 256K)
  MYSQL_READ_BUFFER_SIZE (default: 8M or 5% of available memory)
  MYSQL_INNODB_BUFFER_POOL_SIZE (default: 32M or 50% of available memory)
  MYSQL_INNODB_LOG_FILE_SIZE (default: 8M or 15% of available memory)
  MYSQL_INNODB_LOG_BUFFER_SIZE (default: 8M or 15% of available memory)

For more information, see https://github.com/sclorg/mysql-container
[student@workstation ~]$ podman run --name mysql -d -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55  registry.redhat.io/rhel8/mysql-80:1
2945d6aa479b1190c4bcabfa559059defe11794b398e1899acf9527aed01b0a4
[student@workstation ~]$ podman ps -a
CONTAINER ID  IMAGE                                COMMAND     CREATED        STATUS                    PORTS       NAMES
1004d03199c9  registry.redhat.io/rhel8/mysql-80:1  run-mysqld  8 minutes ago  Exited (1) 8 minutes ago              mysql-db
2945d6aa479b  registry.redhat.io/rhel8/mysql-80:1  run-mysqld  6 seconds ago  Up 7 seconds ago                      mysql
[student@workstation ~]$ podman ps 
CONTAINER ID  IMAGE                                COMMAND     CREATED         STATUS             PORTS       NAMES
2945d6aa479b  registry.redhat.io/rhel8/mysql-80:1  run-mysqld  12 seconds ago  Up 12 seconds ago              mysql
[student@workstation ~]$ podman cp ~/DO180/labs/manage-lifecycle/db.sql mysql:/
[student@workstation ~]$ cat DO180/labs/manage-lifecycle/db.sql 
CREATE TABLE `Projects` (id int(11) NOT NULL, `name` varchar(255) DEFAULT NULL, `code` varchar(255) DEFAULT NULL, PRIMARY KEY (id));
insert into `Projects` (`id`, `name`, `code`) values (1,'DevOps','DO180');
[student@workstation ~]$ 
[student@workstation ~]$ podman exec mysql /bin/bash -c 'mysql -uuser1 -pmypa55 items < /db.sql'
mysql: [Warning] Using a password on the command line interface can be insecure.
[student@workstation ~]$ podman run --name mysql-2 -it registry.redhat.io/rhel8/mysql-80:1 /bin/bash
bash-4.4$ mysql -uroot
ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (2)
bash-4.4$ exit
exit
[student@workstation ~]$ podman ps -a
CONTAINER ID  IMAGE                                COMMAND     CREATED         STATUS                         PORTS       NAMES
1004d03199c9  registry.redhat.io/rhel8/mysql-80:1  run-mysqld  16 minutes ago  Exited (1) 16 minutes ago                  mysql-db
2945d6aa479b  registry.redhat.io/rhel8/mysql-80:1  run-mysqld  7 minutes ago   Up 7 minutes ago                           mysql
913c1f90aa08  registry.redhat.io/rhel8/mysql-80:1  /bin/bash   3 minutes ago   Exited (1) About a minute ago              mysql-2
[student@workstation ~]$ podman exec mysql /bin/bash -c 'mysql -uuser1 -pmypa55 -e "select * from items.Projects;"'
mysql: [Warning] Using a password on the command line interface can be insecure.
id	name	code
1	DevOps	DO180
[student@workstation ~]$ lab manage-lifecycle finish

Completing the Guided Excercise: Managing a MySQL Container

 · Stopping 'mysql' container..................................  SUCCESS
 · Stopping 'mysql-2' container................................  SUCCESS
 · Removing 'mysql' container..................................  SUCCESS
 · Removing 'mysql-2' container................................  SUCCESS
 · Removing 'mysql-db' container...............................  SUCCESS
 · Removing 'registry.redhat.io/rhel8/mysql-80:1' image........  SUCCESS
 · Removing the project directory..............................  SUCCESS
 · Removing the solution directory.............................  SUCCESS
[student@workstation ~]$ 

--------------------------------------Create MySQL Container with Persistent
Database-------------

[student@workstation ~]$ lab manage-storage start

Setting up workstation for the Guided Exercise: Persisting a MySQL Database

 · Checking podman configuration...............................  SUCCESS
 · Check if the directory used by lab is not created...........  SUCCESS
[student@workstation ~]$ mkdir -vp /home/student/local/mysql
mkdir: created directory '/home/student/local/mysql'
[student@workstation ~]$ sudo semanage fcontext -a -t container_file_t '/home/student/local/mysql(/.*)?'
ValueError: File context for /home/student/local/mysql(/.*)? already defined
[student@workstation ~]$ sudo restorecon -R /home/student/local/mysql
[student@workstation ~]$ ls -ldZ /home/student/local/mysql
drwxrwxr-x. 2 student student unconfined_u:object_r:container_file_t:s0 6 Oct  6 12:43 /home/student/local/mysql
[student@workstation ~]$ podman unshare chown 27:27 /home/student/local/mysql
[student@workstation ~]$ podman login registry.redhat.io
Username: veeraabose
Password: 
Login Succeeded!
[student@workstation ~]$ podman pull registry.redhat.io/rhel8/mysql-80:1
Trying to pull registry.redhat.io/rhel8/mysql-80:1...
Getting image source signatures
Checking if image destination supports signatures
Copying blob 36bead343ed7 done  
Copying blob 809fe483e885 done  
Copying blob 1770f4614fe5 done  
Copying blob 1b3417e31a5e done  
Copying config b5b0298033 done  
Writing manifest to image destination
Storing signatures
b5b0298033611d0c00b66d8664f60997908e9b8ec0e131a5a124783879951bf2
[student@workstation ~]$ podman images
REPOSITORY                         TAG         IMAGE ID      CREATED     SIZE
registry.redhat.io/rhel8/mysql-80  1           b5b029803361  2 days ago  624 MB
[student@workstation ~]$ podman run --name persist-db -d -v /home/student/local/mysql:/var/lib/mysql/data -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55 registry.redhat.io/rhel8/mysql-80:1
8d709d45239b043b104a4c137de4bdfaf5470ab7c4755cfc73d7073eb841491f
[student@workstation ~]$ podman ps
CONTAINER ID  IMAGE                                COMMAND     CREATED        STATUS            PORTS       NAMES
8d709d45239b  registry.redhat.io/rhel8/mysql-80:1  run-mysqld  8 seconds ago  Up 8 seconds ago              persist-db
[student@workstation ~]$ podman ps --format="{{.ID}} {{.Names}} {{.Status}}"
8d709d45239b persist-db Up 38 seconds ago
[student@workstation ~]$ ls -ld /home/student/local/mysql/items
drwxr-x---. 2 100026 100026 6 Oct  6 12:49 /home/student/local/mysql/items
[student@workstation ~]$ date
Thu Oct  6 12:50:38 EDT 2022
[student@workstation ~]$ lab manage-storage finish

Completing the Guided Exercise: Persisting a MySQL Database

 · Stopping 'persist-db' container.............................  SUCCESS
 · Removing 'persist-db' container.............................  SUCCESS
 · Removing the 'registry.redhat.io/rhel8/mysql-80:1' image....  SUCCESS
 · Removing the /home/student/local/mysql directory............  SUCCESS
 · Removing the fcontext for /home/student/local/mysql.........  SUCCESS
[student@workstation ~]$ 

----------------------------------------GE--Loading the Database------------------------

[student@workstation ~]$ lab manage-networking start

Setting up workstation for the Guided Exercise: Loading the Database

 · Checking podman configuration...............................  SUCCESS
 · Creating a host directory for the database container:
   · Adding fcontext policy for /home/student/local/mysql......  SUCCESS
   · Creating the /home/student/local/mysql directory..........  SUCCESS
   · Apply fcontext policy to /home/student/local/mysql........  SUCCESS
   · Change owner of the /home/student/local/mysql to the mysql  SUCCESS
 · Downloading starter project.................................  SUCCESS
 · Downloading solution project................................  SUCCESS

Setup successful. Please proceed with the exercise.


[student@workstation ~]$ podman login registry.redhat.io
Authenticating with existing credentials for registry.redhat.io
Existing credentials are valid. Already logged in to registry.redhat.io
[student@workstation ~]$ podman run --name mysqldb-port -d -v /home/student/local/mysql:/var/lib/mysql/data -p 13306:3306 -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55 registry.redhat.io/rhel8/mysql-80:1
Trying to pull registry.redhat.io/rhel8/mysql-80:1...
Getting image source signatures
Checking if image destination supports signatures
Copying blob 809fe483e885 done  
Copying blob 36bead343ed7 done  
Copying blob 1770f4614fe5 done  
Copying blob 1b3417e31a5e done  
Copying config b5b0298033 done  
Writing manifest to image destination
Storing signatures
3c57290e0e84e99143d43483353dd46fea2837ba7247172fe179ef795bab4bf1
[student@workstation ~]$ podman ps
CONTAINER ID  IMAGE                                COMMAND     CREATED         STATUS             PORTS                    NAMES
3c57290e0e84  registry.redhat.io/rhel8/mysql-80:1  run-mysqld  29 seconds ago  Up 29 seconds ago  0.0.0.0:13306->3306/tcp  mysqldb-port
[student@workstation ~]$ 0.0.0.0:13306->3306/tcp  mysqldb-port
bash: 3306/tcp: No such file or directory
[student@workstation ~]$ podman ps --format="{{.ID}} {{.Names}} {{.Ports}}"
3c57290e0e84 mysqldb-port 0.0.0.0:13306->3306/tcp
[student@workstation ~]$ mysql -uuser1 -h 127.0.0.1 -pmypa55 -P13306 items < /home/student/DO180/labs/manage-networking/db.sql
mysql: [Warning] Using a password on the command line interface can be insecure.
[student@workstation ~]$ podman exec -it mysqldb-port mysql -uroot items -e "SELECT * FROM Item"
+----+-------------------+------+
| id | description       | done |
+----+-------------------+------+
|  1 | Pick up newspaper |    0 |
|  2 | Buy groceries     |    1 |
+----+-------------------+------+
[student@workstation ~]$ cat /home/student/DO180/labs/manage-networking/db.sql 
CREATE TABLE `Item` (`id` BIGINT not null auto_increment primary key, `description` VARCHAR(100), `done` INT);
INSERT INTO `Item` (`id`,`description`,`done`) VALUES (1,'Pick up newspaper', 0);
INSERT INTO `Item` (`id`,`description`,`done`) VALUES (2,'Buy groceries', 1);
[student@workstation ~]$ mysql -uuser1 -h 127.0.0.1 -pmypa55 -P13306 items -e "SELECT * FROM Item"
mysql: [Warning] Using a password on the command line interface can be insecure.
+----+-------------------+------+
| id | description       | done |
+----+-------------------+------+
|  1 | Pick up newspaper |    0 |
|  2 | Buy groceries     |    1 |
+----+-------------------+------+
[student@workstation ~]$ podman exec -it mysqldb-port /bin/bash
bash-4.4$ mysql -uroot items -e "SELECT * FROM Item"
+----+-------------------+------+
| id | description       | done |
+----+-------------------+------+
|  1 | Pick up newspaper |    0 |
|  2 | Buy groceries     |    1 |
+----+-------------------+------+
bash-4.4$ exit
exit
[student@workstation ~]$ lab manage-networking finish

Completing the Guided Exercise: Loading the Database

 · Stopping the 'mysqldb-port' container.......................  SUCCESS
 · Removing the 'mysqldb-port' container.......................  SUCCESS
 · Removing the 'registry.redhat.io/rhel8/mysql-80:1' image....  SUCCESS
 · Removing the /home/student/local/mysql directory............  SUCCESS
 · Removing the fcontext for /home/student/local/mysql.........  SUCCESS



