[student@workstation ~]$ lab-configure

 . Enter the GitHub account name: veerabose
   Verifying GitHub account name: veerabose

 . Enter the Quay.io account name: veeraabose
   Verifying Quay.io account name: veeraabose

 . Configuring RHT_OCP4_GITHUB_USER variable: SUCCESS
 . Configuring RHT_OCP4_QUAY_USER variable:   SUCCESS

 . To reconfigure, run: lab-configure -d

 . Ensuring user 'developer' can log in to the OpenShift cluster.
Warning: Permanently added 'utility,172.25.250.253' (ECDSA) to the list of known hosts.
ERROR: Cannot currently log in as user kubeadmin.
[student@workstation ~]$ ^C
[student@workstation ~]$ ^C
[student@workstation ~]$ https://github.com/veerabose/DO180-apps.git
bash: https://github.com/veerabose/DO180-apps.git: No such file or directory
[student@workstation ~]$ git clone https://github.com/veerabose/DO180-apps.git
Cloning into 'DO180-apps'...
remote: Enumerating objects: 172, done.
remote: Total 172 (delta 0), reused 0 (delta 0), pack-reused 172
Receiving objects: 100% (172/172), 287.19 KiB | 480.00 KiB/s, done.
Resolving deltas: 100% (70/70), done.
[student@workstation ~]$ ls
Desktop  DO180-apps  Documents  Downloads  Music  Pictures  Public  Templates  Videos
[student@workstation ~]$ cd DO180-apps/
[student@workstation DO180-apps]$ git status
On branch master
Your branch is up to date with 'origin/master'.

nothing to commit, working tree clean
[student@workstation DO180-apps]$

[student@workstation DO180-apps]$ git checkout -b testbranch
Switched to a new branch testbranch

[student@workstation DO180-apps]$ git add .
[student@workstation DO180-apps]$ git commit -m "DO180"
[testbranch a2978b1] DO180
 1 file changed, 1 insertion(+)
 create mode 100644 TEST
[student@workstation DO180-apps]$ git push --set-upstream origin testbranch
Gtk-Message: 12:09:29.984: Failed to load module "canberra-gtk-module"
Gtk-Message: 12:09:42.026: Failed to load module "canberra-gtk-module"
remote: No anonymous write access.
fatal: Authentication failed for 'https://github.com/veerabose/DO180-apps.git/'
[student@workstation DO180-apps]$ git push --set-upstream origin testbranch
Gtk-Message: 12:10:00.358: Failed to load module "canberra-gtk-module"
Gtk-Message: 12:10:21.575: Failed to load module "canberra-gtk-module"
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 2 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 285 bytes | 285.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
remote: 
remote: Create a pull request for 'testbranch' on GitHub by visiting:
remote:      https://github.com/veerabose/DO180-apps/pull/new/testbranch
remote: 
To https://github.com/veerabose/DO180-apps.git
 * [new branch]      testbranch -> testbranch
Branch 'testbranch' set up to track remote branch 'testbranch' from 'origin'.
[student@workstation DO180-apps]$ echo "OCP4" > TEST
[student@workstation DO180-apps]$ git add .
[student@workstation DO180-apps]$ git commit -m "OCP4"
[testbranch 00edc58] OCP4
 1 file changed, 1 insertion(+), 1 deletion(-)
[student@workstation DO180-apps]$ git push
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 2 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 274 bytes | 274.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/veerabose/DO180-apps.git
   a2978b1..00edc58  testbranch -> testbranch
[student@workstation DO180-apps]$ 

----------------------
In this chapter, you learned:
• Containers are isolated application runtimes, created with very little overhead.
• A container image packages an application with all of its dependencies, making it easier to run
the application in different environments.
• Applications such as Podman create containers using features of the standard Linux kernel.
• Container image registries are the preferred mechanism for distributing container images to
multiple users and hosts.
• OpenShift orchestrates applications composed of multiple containers using Kubernetes.
• Kubernetes manages load balancing, high availability, and persistent storage for containerized
applications.
• OpenShift adds to Kubernetes multitenancy, security, ease of use, and continuous integration
and continuous development features.
• OpenShift routes enable external access to containerized applications in a manageable way.

---------------------------------------------

[student@workstation DO180-apps]$ lab container-create start

Setting up workstation for the Guided Exercise: Creating a MySQL database instance

 · Checking podman configuration...............................  SUCCESS
 · Creating create_table.txt file..............................  SUCCESS
[student@workstation DO180-apps]$ podman login registry.redhat.io
Username: veeraabose
Password: 
Login Succeeded!
[student@workstation DO180-apps]$

[student@workstation DO180-apps]$ podman run --name mysql-basic -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55 -d registry.redhat.io/rhel8/mysql-80:1
Trying to pull registry.redhat.io/rhel8/mysql-80:1...
Getting image source signatures
Checking if image destination supports signatures
Copying blob 36bead343ed7 done  
Copying blob e556e33d0b40 done  
Copying blob 1b3417e31a5e done  
Copying blob 809fe483e885 done  
Copying config 82eb01fb3a done  
Writing manifest to image destination
Storing signatures
770f4a2f7d0092db37f1ecbee7346ba52d13eb7ef9429259a2db7f5d83b01e24
[student@workstation DO180-apps]$ podman ps --format "{{.ID}} {{.Image}} {{.Names}}"
770f4a2f7d00 registry.redhat.io/rhel8/mysql-80:1 mysql-basic
[student@workstation DO180-apps]$ podman exec -it mysql-basic /bin/bash
bash-4.4$ mysql -uroot
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 8
Server version: 8.0.26 Source distribution

Copyright (c) 2000, 2021, Oracle and/or its affiliates.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| items              |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)

mysql> USE items;
Database changed
mysql> 
mysql> CREATE TABLE Projects (id int NOT NULL,
    -> name varchar(255) DEFAULT NULL,
    -> code varchar(255) DEFAULT NULL,
    -> PRIMARY KEY (id));
Query OK, 0 rows affected (0.06 sec)

mysql> SHOW TABLES;
+-----------------+
| Tables_in_items |
+-----------------+
| Projects        |
+-----------------+
1 row in set (0.00 sec)

mysql> INSERT INTO Projects (id, name, code) VALUES (1,'DevOps','DO180');
Query OK, 1 row affected (0.02 sec)

mysql> SELECT * FROM Projects;
+----+--------+-------+
| id | name   | code  |
+----+--------+-------+
|  1 | DevOps | DO180 |
+----+--------+-------+
1 row in set (0.00 sec)

mysql>
mysql> exit
Bye
bash-4.4$ exit
exit
[student@workstation DO180-apps]$ 

[student@workstation DO180-apps]$ lab container-create finish

Completing the Guided Exercise: Creating a MySQL database instance

 · Removing "mysql-basic" container............................  SUCCESS
 · Removing "registry.redhat.io/rhel8/mysql-80:1" image........  SUCCESS
[student@workstation DO180-apps]$





